#The calendar that counts holidays between 1920–present.
def dateIsBefore(y1, m1, d1, y2, m2, d2):
    if y1 < y2:
        return True
    elif y1 == y2:
        if m1 < m2:
            return True
        elif m1 == m2:
            return d1<d2 #it will return False or True
    return False


def daysBetweenDates(y1, m1, d1, y2, m2, d2):         
    assert not dateIsBefore(y2, m2, d2, y1, m1, d1)
    days = 0
    while dateIsBefore(y1, m1, d1, y2, m2, d2):
        y1, m1, d1 = nextDay(y1, m1, d1)
        days += 1
    return days



def isLeapYear(year):
    if year%400 == 0:
        return True
    if year%100 == 0:
        return False
    if year%4 == 0:
        return True
    return False



def daysInMonth(year, month):
    if month in (1,3,5,7,8,10,12):
        return 31
    else:
        if month == 2:
            if isLeapYear(year):
                return 29
            return 28
        else:
            return 30
        

def nextDay(year, month, day):
    if day < daysInMonth(year, month):
        return [year, month, day + 1]
    else:
        if month < 12:
            return [year, month + 1, 1]
        else:
            return [year + 1, 1, 1]

vacations=[
    (1935,1,1),
    (1921,4,23),
    (2009,5,1),
    (1935,5,19),
    (2016,7,15),
    (1935,8,30),
    (1925,10,29)
    ]
religious=[(1920,6,18),(1920,8,25)]#Feast of Ramadan and feast of sacrifice
def vacation_days(y1, m1, d1, y2, m2, d2):
    if dateIsBefore(y2, m2, d2,y1, m1, d1):#Locations of (y1,m1,d1) and (y2,m2,d2) was changed to check if date is true.
        return "Date 2 is before date 1"
    if d1>daysInMonth(y1, m1)or d2>daysInMonth(y2, m2) or m1>12 or m2>12:#It was created to find invalid inputs.
        return "Input months, days or years are invalid"
    
    total_vacation_days=0
    date=[y1,m1,d1]#This date list will be used instead of y1,m1, and d1 for every 'for loop'.
    for vacaiton in vacations:#Calculating the number of vacation days included in the list of vacations.
        while dateIsBefore(date[0], date[1], date[2], y2, m2, d2):
            if date[0]>=vacaiton[0] and date[1]==vacaiton[1] and date[2]==vacaiton[2]:
                total_vacation_days+=1
            date=nextDay(date[0], date[1], date[2])
        date=[y1,m1,d1]
    for i in [[1920,6,18],[1920,8,25]]:##Because it changes 10 days to earlier time each yer, i added 355 days.
        while dateIsBefore(i[0], i[1], i[2], y2, m2, d2):
            if [i[0], i[1], i[2]]not in religious:
                religious.append((i[0], i[1], i[2]))#
            for j in range(355):##It brings us new holiday
                [i[0], i[1], i[2]]=nextDay(i[0], i[1], i[2])
    for eid in religious:#religious vacations
        while dateIsBefore(date[0], date[1], date[2], y2, m2, d2):
            if date[0]==eid[0] and date[1]==eid[1] and date[2]==eid[2]:#If the day is same with vacation day.(That is showed.)
                total_vacation_days+=1
            date=nextDay(date[0], date[1], date[2])
        date=[y1,m1,d1]
    while dateIsBefore(date[0], date[1], date[2], y2, m2, d2):#weekend holidays
        if date[0]>=1935:#Weekend holiday after 1935
            if daysBetweenDates(1935, 1, 6, date[0], date[1], date[2])%7==0:##Mod alarak her 7 hafta sonraki de pazar ise tüm pazarları buldum ve saydırdım.
                total_vacation_days+=1
            if date[0]<1935:#Weekend holiday before 1935
                if daysBetweenDates(date[0], date[1], date[2],1934,12,28)%7==0:
                    total_vacation_days+=1
            date=nextDay(date[0], date[1], date[2])
    return total_vacation_days
print(vacation_days(2020, 2, 10, 2021, 2, 2))